// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/healer/healer.proto

package healer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Healer service

func NewHealerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Healer service

type HealerService interface {
	HealList(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*HealResponse, error)
	Categories(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CateResponse, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Healer_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Healer_PingPongService, error)
}

type healerService struct {
	c    client.Client
	name string
}

func NewHealerService(name string, c client.Client) HealerService {
	return &healerService{
		c:    c,
		name: name,
	}
}

func (c *healerService) HealList(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*HealResponse, error) {
	req := c.c.NewRequest(c.name, "Healer.HealList", in)
	out := new(HealResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healerService) Categories(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CateResponse, error) {
	req := c.c.NewRequest(c.name, "Healer.Categories", in)
	out := new(CateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healerService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Healer_StreamService, error) {
	req := c.c.NewRequest(c.name, "Healer.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &healerServiceStream{stream}, nil
}

type Healer_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type healerServiceStream struct {
	stream client.Stream
}

func (x *healerServiceStream) Close() error {
	return x.stream.Close()
}

func (x *healerServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *healerServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *healerServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *healerServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healerService) PingPong(ctx context.Context, opts ...client.CallOption) (Healer_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Healer.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &healerServicePingPong{stream}, nil
}

type Healer_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type healerServicePingPong struct {
	stream client.Stream
}

func (x *healerServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *healerServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *healerServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *healerServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *healerServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *healerServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Healer service

type HealerHandler interface {
	HealList(context.Context, *CallRequest, *HealResponse) error
	Categories(context.Context, *CallRequest, *CateResponse) error
	Stream(context.Context, *StreamingRequest, Healer_StreamStream) error
	PingPong(context.Context, Healer_PingPongStream) error
}

func RegisterHealerHandler(s server.Server, hdlr HealerHandler, opts ...server.HandlerOption) error {
	type healer interface {
		HealList(ctx context.Context, in *CallRequest, out *HealResponse) error
		Categories(ctx context.Context, in *CallRequest, out *CateResponse) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Healer struct {
		healer
	}
	h := &healerHandler{hdlr}
	return s.Handle(s.NewHandler(&Healer{h}, opts...))
}

type healerHandler struct {
	HealerHandler
}

func (h *healerHandler) HealList(ctx context.Context, in *CallRequest, out *HealResponse) error {
	return h.HealerHandler.HealList(ctx, in, out)
}

func (h *healerHandler) Categories(ctx context.Context, in *CallRequest, out *CateResponse) error {
	return h.HealerHandler.Categories(ctx, in, out)
}

func (h *healerHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.HealerHandler.Stream(ctx, m, &healerStreamStream{stream})
}

type Healer_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type healerStreamStream struct {
	stream server.Stream
}

func (x *healerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *healerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *healerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *healerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *healerStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *healerHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.HealerHandler.PingPong(ctx, &healerPingPongStream{stream})
}

type Healer_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type healerPingPongStream struct {
	stream server.Stream
}

func (x *healerPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *healerPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *healerPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *healerPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *healerPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *healerPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
